//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class UpdateTagDto implements IUpdateTagDto {
    name?: string;
    description?: string;

    [key: string]: any;

    constructor(data?: IUpdateTagDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.name = _data["name"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): UpdateTagDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateTagDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["name"] = this.name;
        data["description"] = this.description;
        return data;
    }
}

export interface IUpdateTagDto {
    name?: string;
    description?: string;

    [key: string]: any;
}

export class CreateIncomeCategoryDto implements ICreateIncomeCategoryDto {
    description?: string;
    name?: string;

    [key: string]: any;

    constructor(data?: ICreateIncomeCategoryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.description = _data["description"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): CreateIncomeCategoryDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateIncomeCategoryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["description"] = this.description;
        data["name"] = this.name;
        return data;
    }
}

export interface ICreateIncomeCategoryDto {
    description?: string;
    name?: string;

    [key: string]: any;
}

export class CreateExpenseCategoryDto implements ICreateExpenseCategoryDto {
    description?: string;
    name?: string;
    budget?: number;

    [key: string]: any;

    constructor(data?: ICreateExpenseCategoryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.description = _data["description"];
            this.name = _data["name"];
            this.budget = _data["budget"];
        }
    }

    static fromJS(data: any): CreateExpenseCategoryDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateExpenseCategoryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["description"] = this.description;
        data["name"] = this.name;
        data["budget"] = this.budget;
        return data;
    }
}

export interface ICreateExpenseCategoryDto {
    description?: string;
    name?: string;
    budget?: number;

    [key: string]: any;
}

export class UpdateUserDto implements IUpdateUserDto {
    firstName?: string;
    lastName?: string;
    currencyId?: number;

    [key: string]: any;

    constructor(data?: IUpdateUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.currencyId = _data["currencyId"];
        }
    }

    static fromJS(data: any): UpdateUserDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["currencyId"] = this.currencyId;
        return data;
    }
}

export interface IUpdateUserDto {
    firstName?: string;
    lastName?: string;
    currencyId?: number;

    [key: string]: any;
}

export class CreateTagDto implements ICreateTagDto {
    name?: string;
    description?: string;

    [key: string]: any;

    constructor(data?: ICreateTagDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.name = _data["name"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): CreateTagDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateTagDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["name"] = this.name;
        data["description"] = this.description;
        return data;
    }
}

export interface ICreateTagDto {
    name?: string;
    description?: string;

    [key: string]: any;
}

export class GetTagDto implements IGetTagDto {
    id?: number;
    name?: string;
    description?: string;
    userId?: string;

    [key: string]: any;

    constructor(data?: IGetTagDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.userId = _data["userId"];
        }
    }

    static fromJS(data: any): GetTagDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetTagDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["userId"] = this.userId;
        return data;
    }
}

export interface IGetTagDto {
    id?: number;
    name?: string;
    description?: string;
    userId?: string;

    [key: string]: any;
}

export class CreateIncomeDto implements ICreateIncomeDto {
    categoryId?: number;
    amount?: number;
    date?: Date;
    currencyId?: number;
    description?: string;

    [key: string]: any;

    constructor(data?: ICreateIncomeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.categoryId = _data["categoryId"];
            this.amount = _data["amount"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.currencyId = _data["currencyId"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): CreateIncomeDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateIncomeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["categoryId"] = this.categoryId;
        data["amount"] = this.amount;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["currencyId"] = this.currencyId;
        data["description"] = this.description;
        return data;
    }
}

export interface ICreateIncomeDto {
    categoryId?: number;
    amount?: number;
    date?: Date;
    currencyId?: number;
    description?: string;

    [key: string]: any;
}

export class Expense implements IExpense {
    id?: number;
    userId?: string;
    amount?: number;
    currencyId?: number;
    date?: Date;
    description?: string;
    month?: number;
    year?: number;
    week?: number;
    lastUpdate?: Date;
    categoryId?: number;

    [key: string]: any;

    constructor(data?: IExpense) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.userId = _data["userId"];
            this.amount = _data["amount"];
            this.currencyId = _data["currencyId"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.description = _data["description"];
            this.month = _data["month"];
            this.year = _data["year"];
            this.week = _data["week"];
            this.lastUpdate = _data["lastUpdate"] ? new Date(_data["lastUpdate"].toString()) : <any>undefined;
            this.categoryId = _data["categoryId"];
        }
    }

    static fromJS(data: any): Expense {
        data = typeof data === 'object' ? data : {};
        let result = new Expense();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["userId"] = this.userId;
        data["amount"] = this.amount;
        data["currencyId"] = this.currencyId;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["description"] = this.description;
        data["month"] = this.month;
        data["year"] = this.year;
        data["week"] = this.week;
        data["lastUpdate"] = this.lastUpdate ? this.lastUpdate.toISOString() : <any>undefined;
        data["categoryId"] = this.categoryId;
        return data;
    }
}

export interface IExpense {
    id?: number;
    userId?: string;
    amount?: number;
    currencyId?: number;
    date?: Date;
    description?: string;
    month?: number;
    year?: number;
    week?: number;
    lastUpdate?: Date;
    categoryId?: number;

    [key: string]: any;
}

export class CreateExpenseDto implements ICreateExpenseDto {
    categoryId?: number;
    amount?: number;
    currencyId?: number;
    date?: Date;
    description?: string;

    [key: string]: any;

    constructor(data?: ICreateExpenseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.categoryId = _data["categoryId"];
            this.amount = _data["amount"];
            this.currencyId = _data["currencyId"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): CreateExpenseDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateExpenseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["categoryId"] = this.categoryId;
        data["amount"] = this.amount;
        data["currencyId"] = this.currencyId;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["description"] = this.description;
        return data;
    }
}

export interface ICreateExpenseDto {
    categoryId?: number;
    amount?: number;
    currencyId?: number;
    date?: Date;
    description?: string;

    [key: string]: any;
}

export class CreateCurrencyDto implements ICreateCurrencyDto {
    name?: string;
    symbol?: string;
    description?: string;

    [key: string]: any;

    constructor(data?: ICreateCurrencyDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.name = _data["name"];
            this.symbol = _data["symbol"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): CreateCurrencyDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCurrencyDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["name"] = this.name;
        data["symbol"] = this.symbol;
        data["description"] = this.description;
        return data;
    }
}

export interface ICreateCurrencyDto {
    name?: string;
    symbol?: string;
    description?: string;

    [key: string]: any;
}

export class GetCurrencyDto implements IGetCurrencyDto {
    id?: number;
    name?: string;
    symbol?: string;
    description?: string;

    [key: string]: any;

    constructor(data?: IGetCurrencyDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.name = _data["name"];
            this.symbol = _data["symbol"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): GetCurrencyDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetCurrencyDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["name"] = this.name;
        data["symbol"] = this.symbol;
        data["description"] = this.description;
        return data;
    }
}

export interface IGetCurrencyDto {
    id?: number;
    name?: string;
    symbol?: string;
    description?: string;

    [key: string]: any;
}

export class UpdateBudgetDto implements IUpdateBudgetDto {
    categoryId?: number;
    newBudget?: number;

    [key: string]: any;

    constructor(data?: IUpdateBudgetDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.categoryId = _data["categoryId"];
            this.newBudget = _data["newBudget"];
        }
    }

    static fromJS(data: any): UpdateBudgetDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateBudgetDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["categoryId"] = this.categoryId;
        data["newBudget"] = this.newBudget;
        return data;
    }
}

export interface IUpdateBudgetDto {
    categoryId?: number;
    newBudget?: number;

    [key: string]: any;
}

export class CreateUserDto implements ICreateUserDto {
    username?: string;
    password?: string;
    confirmPassword?: string;
    email?: string;

    [key: string]: any;

    constructor(data?: ICreateUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.username = _data["username"];
            this.password = _data["password"];
            this.confirmPassword = _data["confirmPassword"];
            this.email = _data["email"];
        }
    }

    static fromJS(data: any): CreateUserDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["username"] = this.username;
        data["password"] = this.password;
        data["confirmPassword"] = this.confirmPassword;
        data["email"] = this.email;
        return data;
    }
}

export interface ICreateUserDto {
    username?: string;
    password?: string;
    confirmPassword?: string;
    email?: string;

    [key: string]: any;
}

export class UserLoginRequest implements IUserLoginRequest {
    username?: string;
    email?: string;
    password?: string;

    [key: string]: any;

    constructor(data?: IUserLoginRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.username = _data["username"];
            this.email = _data["email"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): UserLoginRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UserLoginRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["username"] = this.username;
        data["email"] = this.email;
        data["password"] = this.password;
        return data;
    }
}

export interface IUserLoginRequest {
    username?: string;
    email?: string;
    password?: string;

    [key: string]: any;
}

export class GetUserDto implements IGetUserDto {
    id?: string;
    username?: string;
    email?: string;
    profilePicture?: string;
    creationDate?: Date;
    firstName?: string;
    lastName?: string;
    role?: GetUserDtoRole;
    currencyId?: number;

    [key: string]: any;

    constructor(data?: IGetUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.username = _data["username"];
            this.email = _data["email"];
            this.profilePicture = _data["profilePicture"];
            this.creationDate = _data["creationDate"] ? new Date(_data["creationDate"].toString()) : <any>undefined;
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.role = _data["role"];
            this.currencyId = _data["currencyId"];
        }
    }

    static fromJS(data: any): GetUserDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["username"] = this.username;
        data["email"] = this.email;
        data["profilePicture"] = this.profilePicture;
        data["creationDate"] = this.creationDate ? this.creationDate.toISOString() : <any>undefined;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["role"] = this.role;
        data["currencyId"] = this.currencyId;
        return data;
    }
}

export interface IGetUserDto {
    id?: string;
    username?: string;
    email?: string;
    profilePicture?: string;
    creationDate?: Date;
    firstName?: string;
    lastName?: string;
    role?: GetUserDtoRole;
    currencyId?: number;

    [key: string]: any;
}

export class AverageSpendingDto implements IAverageSpendingDto {
    averageDailySpend?: number;
    averageWeeklySpend?: number;

    [key: string]: any;

    constructor(data?: IAverageSpendingDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.averageDailySpend = _data["averageDailySpend"];
            this.averageWeeklySpend = _data["averageWeeklySpend"];
        }
    }

    static fromJS(data: any): AverageSpendingDto {
        data = typeof data === 'object' ? data : {};
        let result = new AverageSpendingDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["averageDailySpend"] = this.averageDailySpend;
        data["averageWeeklySpend"] = this.averageWeeklySpend;
        return data;
    }
}

export interface IAverageSpendingDto {
    averageDailySpend?: number;
    averageWeeklySpend?: number;

    [key: string]: any;
}

export class BudgetStreakDto implements IBudgetStreakDto {
    longestStreakDays?: number;
    streakStartDate?: string;
    streakEndDate?: string;

    [key: string]: any;

    constructor(data?: IBudgetStreakDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.longestStreakDays = _data["longestStreakDays"];
            this.streakStartDate = _data["streakStartDate"];
            this.streakEndDate = _data["streakEndDate"];
        }
    }

    static fromJS(data: any): BudgetStreakDto {
        data = typeof data === 'object' ? data : {};
        let result = new BudgetStreakDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["longestStreakDays"] = this.longestStreakDays;
        data["streakStartDate"] = this.streakStartDate;
        data["streakEndDate"] = this.streakEndDate;
        return data;
    }
}

export interface IBudgetStreakDto {
    longestStreakDays?: number;
    streakStartDate?: string;
    streakEndDate?: string;

    [key: string]: any;
}

export class CategorySpendingDto implements ICategorySpendingDto {
    categoryId?: number;
    categoryName?: string;
    amount?: number;

    [key: string]: any;

    constructor(data?: ICategorySpendingDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.categoryId = _data["categoryId"];
            this.categoryName = _data["categoryName"];
            this.amount = _data["amount"];
        }
    }

    static fromJS(data: any): CategorySpendingDto {
        data = typeof data === 'object' ? data : {};
        let result = new CategorySpendingDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["categoryId"] = this.categoryId;
        data["categoryName"] = this.categoryName;
        data["amount"] = this.amount;
        return data;
    }
}

export interface ICategorySpendingDto {
    categoryId?: number;
    categoryName?: string;
    amount?: number;

    [key: string]: any;
}

export class DaySpendingDto implements IDaySpendingDto {
    date?: string;
    amount?: number;

    [key: string]: any;

    constructor(data?: IDaySpendingDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.date = _data["date"];
            this.amount = _data["amount"];
        }
    }

    static fromJS(data: any): DaySpendingDto {
        data = typeof data === 'object' ? data : {};
        let result = new DaySpendingDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["date"] = this.date;
        data["amount"] = this.amount;
        return data;
    }
}

export interface IDaySpendingDto {
    date?: string;
    amount?: number;

    [key: string]: any;
}

export class HighestSpendingDto implements IHighestSpendingDto {
    highestSpendingDay?: DaySpendingDto;
    highestSpendingMonth?: MonthSpendingDto;
    highestSpendingCategory?: CategorySpendingDto;

    [key: string]: any;

    constructor(data?: IHighestSpendingDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.highestSpendingDay = _data["highestSpendingDay"] ? DaySpendingDto.fromJS(_data["highestSpendingDay"]) : <any>undefined;
            this.highestSpendingMonth = _data["highestSpendingMonth"] ? MonthSpendingDto.fromJS(_data["highestSpendingMonth"]) : <any>undefined;
            this.highestSpendingCategory = _data["highestSpendingCategory"] ? CategorySpendingDto.fromJS(_data["highestSpendingCategory"]) : <any>undefined;
        }
    }

    static fromJS(data: any): HighestSpendingDto {
        data = typeof data === 'object' ? data : {};
        let result = new HighestSpendingDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["highestSpendingDay"] = this.highestSpendingDay ? this.highestSpendingDay.toJSON() : <any>undefined;
        data["highestSpendingMonth"] = this.highestSpendingMonth ? this.highestSpendingMonth.toJSON() : <any>undefined;
        data["highestSpendingCategory"] = this.highestSpendingCategory ? this.highestSpendingCategory.toJSON() : <any>undefined;
        return data;
    }
}

export interface IHighestSpendingDto {
    highestSpendingDay?: DaySpendingDto;
    highestSpendingMonth?: MonthSpendingDto;
    highestSpendingCategory?: CategorySpendingDto;

    [key: string]: any;
}

export class MonthSpendingDto implements IMonthSpendingDto {
    month?: number;
    year?: number;
    amount?: number;

    [key: string]: any;

    constructor(data?: IMonthSpendingDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.month = _data["month"];
            this.year = _data["year"];
            this.amount = _data["amount"];
        }
    }

    static fromJS(data: any): MonthSpendingDto {
        data = typeof data === 'object' ? data : {};
        let result = new MonthSpendingDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["month"] = this.month;
        data["year"] = this.year;
        data["amount"] = this.amount;
        return data;
    }
}

export interface IMonthSpendingDto {
    month?: number;
    year?: number;
    amount?: number;

    [key: string]: any;
}

export class SavingsDto implements ISavingsDto {
    averageMonthlySavingsRate?: number;
    monthlySavingsPercentage?: { [key: string]: number; };

    [key: string]: any;

    constructor(data?: ISavingsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.averageMonthlySavingsRate = _data["averageMonthlySavingsRate"];
            if (_data["monthlySavingsPercentage"]) {
                this.monthlySavingsPercentage = {} as any;
                for (let key in _data["monthlySavingsPercentage"]) {
                    if (_data["monthlySavingsPercentage"].hasOwnProperty(key))
                        (<any>this.monthlySavingsPercentage)![key] = _data["monthlySavingsPercentage"][key];
                }
            }
        }
    }

    static fromJS(data: any): SavingsDto {
        data = typeof data === 'object' ? data : {};
        let result = new SavingsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["averageMonthlySavingsRate"] = this.averageMonthlySavingsRate;
        if (this.monthlySavingsPercentage) {
            data["monthlySavingsPercentage"] = {};
            for (let key in this.monthlySavingsPercentage) {
                if (this.monthlySavingsPercentage.hasOwnProperty(key))
                    (<any>data["monthlySavingsPercentage"])[key] = (<any>this.monthlySavingsPercentage)[key];
            }
        }
        return data;
    }
}

export interface ISavingsDto {
    averageMonthlySavingsRate?: number;
    monthlySavingsPercentage?: { [key: string]: number; };

    [key: string]: any;
}

export class StatisticalSummaryDto implements IStatisticalSummaryDto {
    highestSpending?: HighestSpendingDto;
    savings?: SavingsDto;
    averageSpending?: AverageSpendingDto;
    budgetStreak?: BudgetStreakDto;

    [key: string]: any;

    constructor(data?: IStatisticalSummaryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.highestSpending = _data["highestSpending"] ? HighestSpendingDto.fromJS(_data["highestSpending"]) : <any>undefined;
            this.savings = _data["savings"] ? SavingsDto.fromJS(_data["savings"]) : <any>undefined;
            this.averageSpending = _data["averageSpending"] ? AverageSpendingDto.fromJS(_data["averageSpending"]) : <any>undefined;
            this.budgetStreak = _data["budgetStreak"] ? BudgetStreakDto.fromJS(_data["budgetStreak"]) : <any>undefined;
        }
    }

    static fromJS(data: any): StatisticalSummaryDto {
        data = typeof data === 'object' ? data : {};
        let result = new StatisticalSummaryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["highestSpending"] = this.highestSpending ? this.highestSpending.toJSON() : <any>undefined;
        data["savings"] = this.savings ? this.savings.toJSON() : <any>undefined;
        data["averageSpending"] = this.averageSpending ? this.averageSpending.toJSON() : <any>undefined;
        data["budgetStreak"] = this.budgetStreak ? this.budgetStreak.toJSON() : <any>undefined;
        return data;
    }
}

export interface IStatisticalSummaryDto {
    highestSpending?: HighestSpendingDto;
    savings?: SavingsDto;
    averageSpending?: AverageSpendingDto;
    budgetStreak?: BudgetStreakDto;

    [key: string]: any;
}

export class GetIncomeDto implements IGetIncomeDto {
    id?: number;
    userId?: string;
    amount?: number;
    currencyId?: number;
    date?: Date;
    description?: string;
    month?: number;
    year?: number;
    week?: number;
    lastUpdate?: Date;
    categoryId?: number;

    [key: string]: any;

    constructor(data?: IGetIncomeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.userId = _data["userId"];
            this.amount = _data["amount"];
            this.currencyId = _data["currencyId"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.description = _data["description"];
            this.month = _data["month"];
            this.year = _data["year"];
            this.week = _data["week"];
            this.lastUpdate = _data["lastUpdate"] ? new Date(_data["lastUpdate"].toString()) : <any>undefined;
            this.categoryId = _data["categoryId"];
        }
    }

    static fromJS(data: any): GetIncomeDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetIncomeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["userId"] = this.userId;
        data["amount"] = this.amount;
        data["currencyId"] = this.currencyId;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["description"] = this.description;
        data["month"] = this.month;
        data["year"] = this.year;
        data["week"] = this.week;
        data["lastUpdate"] = this.lastUpdate ? this.lastUpdate.toISOString() : <any>undefined;
        data["categoryId"] = this.categoryId;
        return data;
    }
}

export interface IGetIncomeDto {
    id?: number;
    userId?: string;
    amount?: number;
    currencyId?: number;
    date?: Date;
    description?: string;
    month?: number;
    year?: number;
    week?: number;
    lastUpdate?: Date;
    categoryId?: number;

    [key: string]: any;
}

export class CategoryComparisonDto implements ICategoryComparisonDto {
    categoryId?: number;
    categoryName?: string;
    currentPeriodAmount?: number;
    previousPeriodAmount?: number;
    difference?: number;
    percentageChange?: number;

    [key: string]: any;

    constructor(data?: ICategoryComparisonDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.categoryId = _data["categoryId"];
            this.categoryName = _data["categoryName"];
            this.currentPeriodAmount = _data["currentPeriodAmount"];
            this.previousPeriodAmount = _data["previousPeriodAmount"];
            this.difference = _data["difference"];
            this.percentageChange = _data["percentageChange"];
        }
    }

    static fromJS(data: any): CategoryComparisonDto {
        data = typeof data === 'object' ? data : {};
        let result = new CategoryComparisonDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["categoryId"] = this.categoryId;
        data["categoryName"] = this.categoryName;
        data["currentPeriodAmount"] = this.currentPeriodAmount;
        data["previousPeriodAmount"] = this.previousPeriodAmount;
        data["difference"] = this.difference;
        data["percentageChange"] = this.percentageChange;
        return data;
    }
}

export interface ICategoryComparisonDto {
    categoryId?: number;
    categoryName?: string;
    currentPeriodAmount?: number;
    previousPeriodAmount?: number;
    difference?: number;
    percentageChange?: number;

    [key: string]: any;
}

export class CategoryComparisonResponseDto implements ICategoryComparisonResponseDto {
    currentPeriodLabel?: string;
    previousPeriodLabel?: string;
    categories?: CategoryComparisonDto[];
    totalCurrentPeriod?: number;
    totalPreviousPeriod?: number;
    totalDifference?: number;
    totalPercentageChange?: number;

    [key: string]: any;

    constructor(data?: ICategoryComparisonResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.currentPeriodLabel = _data["currentPeriodLabel"];
            this.previousPeriodLabel = _data["previousPeriodLabel"];
            if (Array.isArray(_data["categories"])) {
                this.categories = [] as any;
                for (let item of _data["categories"])
                    this.categories!.push(CategoryComparisonDto.fromJS(item));
            }
            this.totalCurrentPeriod = _data["totalCurrentPeriod"];
            this.totalPreviousPeriod = _data["totalPreviousPeriod"];
            this.totalDifference = _data["totalDifference"];
            this.totalPercentageChange = _data["totalPercentageChange"];
        }
    }

    static fromJS(data: any): CategoryComparisonResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new CategoryComparisonResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["currentPeriodLabel"] = this.currentPeriodLabel;
        data["previousPeriodLabel"] = this.previousPeriodLabel;
        if (Array.isArray(this.categories)) {
            data["categories"] = [];
            for (let item of this.categories)
                data["categories"].push(item.toJSON());
        }
        data["totalCurrentPeriod"] = this.totalCurrentPeriod;
        data["totalPreviousPeriod"] = this.totalPreviousPeriod;
        data["totalDifference"] = this.totalDifference;
        data["totalPercentageChange"] = this.totalPercentageChange;
        return data;
    }
}

export interface ICategoryComparisonResponseDto {
    currentPeriodLabel?: string;
    previousPeriodLabel?: string;
    categories?: CategoryComparisonDto[];
    totalCurrentPeriod?: number;
    totalPreviousPeriod?: number;
    totalDifference?: number;
    totalPercentageChange?: number;

    [key: string]: any;
}

export class GetIncomeCategoryDto implements IGetIncomeCategoryDto {
    id?: number;
    userId?: string;
    name?: string;
    description?: string;

    [key: string]: any;

    constructor(data?: IGetIncomeCategoryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.userId = _data["userId"];
            this.name = _data["name"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): GetIncomeCategoryDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetIncomeCategoryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["userId"] = this.userId;
        data["name"] = this.name;
        data["description"] = this.description;
        return data;
    }
}

export interface IGetIncomeCategoryDto {
    id?: number;
    userId?: string;
    name?: string;
    description?: string;

    [key: string]: any;
}

export class GetExpenseCategoryDto implements IGetExpenseCategoryDto {
    id?: number;
    userId?: string;
    name?: string;
    description?: string;
    budget?: number;

    [key: string]: any;

    constructor(data?: IGetExpenseCategoryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.userId = _data["userId"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.budget = _data["budget"];
        }
    }

    static fromJS(data: any): GetExpenseCategoryDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetExpenseCategoryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["userId"] = this.userId;
        data["name"] = this.name;
        data["description"] = this.description;
        data["budget"] = this.budget;
        return data;
    }
}

export interface IGetExpenseCategoryDto {
    id?: number;
    userId?: string;
    name?: string;
    description?: string;
    budget?: number;

    [key: string]: any;
}

export class BudgetBurndownDto implements IBudgetBurndownDto {
    month?: number;
    year?: number;
    categories?: CategoryBurndownDto[];

    [key: string]: any;

    constructor(data?: IBudgetBurndownDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.month = _data["month"];
            this.year = _data["year"];
            if (Array.isArray(_data["categories"])) {
                this.categories = [] as any;
                for (let item of _data["categories"])
                    this.categories!.push(CategoryBurndownDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BudgetBurndownDto {
        data = typeof data === 'object' ? data : {};
        let result = new BudgetBurndownDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["month"] = this.month;
        data["year"] = this.year;
        if (Array.isArray(this.categories)) {
            data["categories"] = [];
            for (let item of this.categories)
                data["categories"].push(item.toJSON());
        }
        return data;
    }
}

export interface IBudgetBurndownDto {
    month?: number;
    year?: number;
    categories?: CategoryBurndownDto[];

    [key: string]: any;
}

export class CategoryBurndownDto implements ICategoryBurndownDto {
    categoryId?: number;
    categoryName?: string;
    budget?: number;
    totalSpent?: number;
    dailySpending?: { [key: string]: number; };
    remainingBudget?: { [key: string]: number; };

    [key: string]: any;

    constructor(data?: ICategoryBurndownDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.categoryId = _data["categoryId"];
            this.categoryName = _data["categoryName"];
            this.budget = _data["budget"];
            this.totalSpent = _data["totalSpent"];
            if (_data["dailySpending"]) {
                this.dailySpending = {} as any;
                for (let key in _data["dailySpending"]) {
                    if (_data["dailySpending"].hasOwnProperty(key))
                        (<any>this.dailySpending)![key] = _data["dailySpending"][key];
                }
            }
            if (_data["remainingBudget"]) {
                this.remainingBudget = {} as any;
                for (let key in _data["remainingBudget"]) {
                    if (_data["remainingBudget"].hasOwnProperty(key))
                        (<any>this.remainingBudget)![key] = _data["remainingBudget"][key];
                }
            }
        }
    }

    static fromJS(data: any): CategoryBurndownDto {
        data = typeof data === 'object' ? data : {};
        let result = new CategoryBurndownDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["categoryId"] = this.categoryId;
        data["categoryName"] = this.categoryName;
        data["budget"] = this.budget;
        data["totalSpent"] = this.totalSpent;
        if (this.dailySpending) {
            data["dailySpending"] = {};
            for (let key in this.dailySpending) {
                if (this.dailySpending.hasOwnProperty(key))
                    (<any>data["dailySpending"])[key] = (<any>this.dailySpending)[key];
            }
        }
        if (this.remainingBudget) {
            data["remainingBudget"] = {};
            for (let key in this.remainingBudget) {
                if (this.remainingBudget.hasOwnProperty(key))
                    (<any>data["remainingBudget"])[key] = (<any>this.remainingBudget)[key];
            }
        }
        return data;
    }
}

export interface ICategoryBurndownDto {
    categoryId?: number;
    categoryName?: string;
    budget?: number;
    totalSpent?: number;
    dailySpending?: { [key: string]: number; };
    remainingBudget?: { [key: string]: number; };

    [key: string]: any;
}

export enum GetUserDtoRole {
    USER = "USER",
    ADMIN = "ADMIN",
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}
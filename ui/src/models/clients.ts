//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "http://localhost:8080/api";
    }

    /**
     * @return OK
     */
    updateTag(id: number, body: UpdateTagDto): Promise<any> {
        let url_ = this.baseUrl + "/tags/update/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateTag(_response);
        });
    }

    protected processUpdateTag(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(null as any);
    }

    /**
     * @return OK
     */
    saveIncomeCategory(body: CreateIncomeCategoryDto): Promise<string> {
        let url_ = this.baseUrl + "/category/income/create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSaveIncomeCategory(_response);
        });
    }

    protected processSaveIncomeCategory(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }

    /**
     * @return OK
     */
    saveExpenseCategory(body: CreateExpenseCategoryDto): Promise<string> {
        let url_ = this.baseUrl + "/category/expense/create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSaveExpenseCategory(_response);
        });
    }

    protected processSaveExpenseCategory(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }

    /**
     * @return OK
     */
    update(username: string, body: UpdateUserDto): Promise<string> {
        let url_ = this.baseUrl + "/user/update/{username}";
        if (username === undefined || username === null)
            throw new Error("The parameter 'username' must be defined.");
        url_ = url_.replace("{username}", encodeURIComponent("" + username));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }

    /**
     * @return OK
     */
    createTag(body: CreateTagDto): Promise<GetTagDto> {
        let url_ = this.baseUrl + "/tags/create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateTag(_response);
        });
    }

    protected processCreateTag(response: Response): Promise<GetTagDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetTagDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetTagDto>(null as any);
    }

    /**
     * @return OK
     */
    addIncome(body: CreateIncomeDto): Promise<string> {
        let url_ = this.baseUrl + "/incomes/add";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "*/*"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddIncome(_response);
        });
    }

    protected processAddIncome(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }

    /**
     * @return OK
     */
    modifySingleExpense(body: Expense): Promise<string> {
        let url_ = this.baseUrl + "/expenses/modify";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processModifySingleExpense(_response);
        });
    }

    protected processModifySingleExpense(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }

    /**
     * @return OK
     */
    addExpense(body: CreateExpenseDto): Promise<string> {
        let url_ = this.baseUrl + "/expenses/add";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddExpense(_response);
        });
    }

    protected processAddExpense(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }

    /**
     * @return OK
     */
    createCurrency(body: CreateCurrencyDto): Promise<GetCurrencyDto> {
        let url_ = this.baseUrl + "/currency/create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateCurrency(_response);
        });
    }

    protected processCreateCurrency(response: Response): Promise<GetCurrencyDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetCurrencyDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetCurrencyDto>(null as any);
    }

    /**
     * @return OK
     */
    modifySetUp(body: UpdateBudgetDto[]): Promise<string> {
        let url_ = this.baseUrl + "/budget/modify";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processModifySetUp(_response);
        });
    }

    protected processModifySetUp(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }

    /**
     * @return OK
     */
    signup(body: CreateUserDto): Promise<string> {
        let url_ = this.baseUrl + "/auth/signup";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "*/*"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSignup(_response);
        });
    }

    protected processSignup(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }

    /**
     * @return OK
     */
    ping(): Promise<string> {
        let url_ = this.baseUrl + "/auth/ping";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "*/*"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPing(_response);
        });
    }

    protected processPing(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }

    /**
     * @return OK
     */
    pingPost(body: string): Promise<string> {
        let url_ = this.baseUrl + "/auth/ping";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "*/*"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPingPost(_response);
        });
    }

    protected processPingPost(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }

    /**
     * @return OK
     */
    pingNot(): Promise<string> {
        let url_ = this.baseUrl + "/auth/ping/not";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "*/*"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPingNot(_response);
        });
    }

    protected processPingNot(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }

    /**
     * @return OK
     */
    logout(): Promise<string> {
        let url_ = this.baseUrl + "/auth/logout";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "*/*"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLogout(_response);
        });
    }

    protected processLogout(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }

    /**
     * @return OK
     */
    login(body: UserLoginRequest): Promise<string> {
        let url_ = this.baseUrl + "/auth/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLogin(_response);
        });
    }

    protected processLogin(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }

    /**
     * @return OK
     */
    deleteExpense(expenseId: number): Promise<string> {
        let url_ = this.baseUrl + "/expenses/delete?";
        if (expenseId === undefined || expenseId === null)
            throw new Error("The parameter 'expenseId' must be defined and cannot be null.");
        else
            url_ += "expenseId=" + encodeURIComponent("" + expenseId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteExpense(_response);
        });
    }

    protected processDeleteExpense(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }

    /**
     * @return OK
     */
    deleteExpenseOptions(): Promise<any> {
        let url_ = this.baseUrl + "/expenses/delete";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "OPTIONS",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteExpenseOptions(_response);
        });
    }

    protected processDeleteExpenseOptions(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(null as any);
    }

    /**
     * @return OK
     */
    getUserProfileData(username: string): Promise<GetUserDto> {
        let url_ = this.baseUrl + "/user/{username}";
        if (username === undefined || username === null)
            throw new Error("The parameter 'username' must be defined.");
        url_ = url_.replace("{username}", encodeURIComponent("" + username));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetUserProfileData(_response);
        });
    }

    protected processGetUserProfileData(response: Response): Promise<GetUserDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetUserDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetUserDto>(null as any);
    }

    /**
     * @return OK
     */
    getUserDataFromJwtToken(): Promise<GetUserDto> {
        let url_ = this.baseUrl + "/user/data";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetUserDataFromJwtToken(_response);
        });
    }

    protected processGetUserDataFromJwtToken(response: Response): Promise<GetUserDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetUserDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetUserDto>(null as any);
    }

    /**
     * @return OK
     */
    getTagById(id: number): Promise<any> {
        let url_ = this.baseUrl + "/tags/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetTagById(_response);
        });
    }

    protected processGetTagById(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(null as any);
    }

    /**
     * @return OK
     */
    getTagsForUser(): Promise<GetTagDto[]> {
        let url_ = this.baseUrl + "/tags/user";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetTagsForUser(_response);
        });
    }

    protected processGetTagsForUser(response: Response): Promise<GetTagDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(GetTagDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetTagDto[]>(null as any);
    }

    /**
     * @return OK
     */
    getStatisticalSummary(): Promise<StatisticalSummaryDto> {
        let url_ = this.baseUrl + "/statistics/summary";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetStatisticalSummary(_response);
        });
    }

    protected processGetStatisticalSummary(response: Response): Promise<StatisticalSummaryDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StatisticalSummaryDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<StatisticalSummaryDto>(null as any);
    }

    /**
     * @return OK
     */
    getIncomesForAYear(year: number): Promise<string> {
        let url_ = this.baseUrl + "/incomes/yearly/{year}";
        if (year === undefined || year === null)
            throw new Error("The parameter 'year' must be defined.");
        url_ = url_.replace("{year}", encodeURIComponent("" + year));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "*/*"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetIncomesForAYear(_response);
        });
    }

    protected processGetIncomesForAYear(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }

    /**
     * @return OK
     */
    getTotalEarnedForAYear(year: number): Promise<string> {
        let url_ = this.baseUrl + "/incomes/total-earned/year?";
        if (year === undefined || year === null)
            throw new Error("The parameter 'year' must be defined and cannot be null.");
        else
            url_ += "year=" + encodeURIComponent("" + year) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "*/*"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetTotalEarnedForAYear(_response);
        });
    }

    protected processGetTotalEarnedForAYear(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }

    /**
     * @return OK
     */
    getTotalEarnedInAMonth(month: number, year: number): Promise<string> {
        let url_ = this.baseUrl + "/incomes/total-earned/month?";
        if (month === undefined || month === null)
            throw new Error("The parameter 'month' must be defined and cannot be null.");
        else
            url_ += "month=" + encodeURIComponent("" + month) + "&";
        if (year === undefined || year === null)
            throw new Error("The parameter 'year' must be defined and cannot be null.");
        else
            url_ += "year=" + encodeURIComponent("" + year) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "*/*"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetTotalEarnedInAMonth(_response);
        });
    }

    protected processGetTotalEarnedInAMonth(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }

    /**
     * @return OK
     */
    getIncomesForAMonth(month: number, year: number): Promise<string> {
        let url_ = this.baseUrl + "/incomes/monthly/{month}/{year}";
        if (month === undefined || month === null)
            throw new Error("The parameter 'month' must be defined.");
        url_ = url_.replace("{month}", encodeURIComponent("" + month));
        if (year === undefined || year === null)
            throw new Error("The parameter 'year' must be defined.");
        url_ = url_.replace("{year}", encodeURIComponent("" + year));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "*/*"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetIncomesForAMonth(_response);
        });
    }

    protected processGetIncomesForAMonth(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }

    /**
     * @return OK
     */
    getIncomeById(id: number): Promise<GetIncomeDto> {
        let url_ = this.baseUrl + "/incomes/get/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "*/*"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetIncomeById(_response);
        });
    }

    protected processGetIncomeById(response: Response): Promise<GetIncomeDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetIncomeDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetIncomeDto>(null as any);
    }

    /**
     * @return OK
     */
    getTotalEarnedInAYearInAMonthlyBasis(year: number): Promise<string> {
        let url_ = this.baseUrl + "/incomes/earned/year/monthly?";
        if (year === undefined || year === null)
            throw new Error("The parameter 'year' must be defined and cannot be null.");
        else
            url_ += "year=" + encodeURIComponent("" + year) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "*/*"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetTotalEarnedInAYearInAMonthlyBasis(_response);
        });
    }

    protected processGetTotalEarnedInAYearInAMonthlyBasis(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }

    /**
     * @return OK
     */
    exportAllData(): Promise<string> {
        let url_ = this.baseUrl + "/export";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "*/*"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processExportAllData(_response);
        });
    }

    protected processExportAllData(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }

    /**
     * @return OK
     */
    getExpensesForAYear(year: number): Promise<string> {
        let url_ = this.baseUrl + "/expenses/yearly/{year}";
        if (year === undefined || year === null)
            throw new Error("The parameter 'year' must be defined.");
        url_ = url_.replace("{year}", encodeURIComponent("" + year));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetExpensesForAYear(_response);
        });
    }

    protected processGetExpensesForAYear(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }

    /**
     * @return OK
     */
    getTotalSpentOnAYear(year: number): Promise<string> {
        let url_ = this.baseUrl + "/expenses/total-spent?";
        if (year === undefined || year === null)
            throw new Error("The parameter 'year' must be defined and cannot be null.");
        else
            url_ += "year=" + encodeURIComponent("" + year) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetTotalSpentOnAYear(_response);
        });
    }

    protected processGetTotalSpentOnAYear(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }

    /**
     * @return OK
     */
    getTotalSpentOnAMonth(month: number, year: number): Promise<string> {
        let url_ = this.baseUrl + "/expenses/total-spent/monthly?";
        if (month === undefined || month === null)
            throw new Error("The parameter 'month' must be defined and cannot be null.");
        else
            url_ += "month=" + encodeURIComponent("" + month) + "&";
        if (year === undefined || year === null)
            throw new Error("The parameter 'year' must be defined and cannot be null.");
        else
            url_ += "year=" + encodeURIComponent("" + year) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetTotalSpentOnAMonth(_response);
        });
    }

    protected processGetTotalSpentOnAMonth(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }

    /**
     * @return OK
     */
    getTotalSpentOnAMonthForACategory(month: number, year: number, category: number): Promise<string> {
        let url_ = this.baseUrl + "/expenses/total-spent/monthly/category?";
        if (month === undefined || month === null)
            throw new Error("The parameter 'month' must be defined and cannot be null.");
        else
            url_ += "month=" + encodeURIComponent("" + month) + "&";
        if (year === undefined || year === null)
            throw new Error("The parameter 'year' must be defined and cannot be null.");
        else
            url_ += "year=" + encodeURIComponent("" + year) + "&";
        if (category === undefined || category === null)
            throw new Error("The parameter 'category' must be defined and cannot be null.");
        else
            url_ += "category=" + encodeURIComponent("" + category) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetTotalSpentOnAMonthForACategory(_response);
        });
    }

    protected processGetTotalSpentOnAMonthForACategory(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }

    /**
     * @return OK
     */
    getExpensesForAYearOfAType(year: number, categoryId: number): Promise<string> {
        let url_ = this.baseUrl + "/expenses/single-type?";
        if (year === undefined || year === null)
            throw new Error("The parameter 'year' must be defined and cannot be null.");
        else
            url_ += "year=" + encodeURIComponent("" + year) + "&";
        if (categoryId === undefined || categoryId === null)
            throw new Error("The parameter 'categoryId' must be defined and cannot be null.");
        else
            url_ += "categoryId=" + encodeURIComponent("" + categoryId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetExpensesForAYearOfAType(_response);
        });
    }

    protected processGetExpensesForAYearOfAType(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }

    /**
     * @return OK
     */
    getExpensesOfATypeForAMonth(month: number, year: number, categoryId: number): Promise<string> {
        let url_ = this.baseUrl + "/expenses/single-type/{month}/{year}?";
        if (month === undefined || month === null)
            throw new Error("The parameter 'month' must be defined.");
        url_ = url_.replace("{month}", encodeURIComponent("" + month));
        if (year === undefined || year === null)
            throw new Error("The parameter 'year' must be defined.");
        url_ = url_.replace("{year}", encodeURIComponent("" + year));
        if (categoryId === undefined || categoryId === null)
            throw new Error("The parameter 'categoryId' must be defined and cannot be null.");
        else
            url_ += "categoryId=" + encodeURIComponent("" + categoryId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetExpensesOfATypeForAMonth(_response);
        });
    }

    protected processGetExpensesOfATypeForAMonth(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }

    /**
     * @return OK
     */
    getExpensesForAMonth(month: number, year: number): Promise<string> {
        let url_ = this.baseUrl + "/expenses/monthly/{month}/{year}";
        if (month === undefined || month === null)
            throw new Error("The parameter 'month' must be defined.");
        url_ = url_.replace("{month}", encodeURIComponent("" + month));
        if (year === undefined || year === null)
            throw new Error("The parameter 'year' must be defined.");
        url_ = url_.replace("{year}", encodeURIComponent("" + year));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetExpensesForAMonth(_response);
        });
    }

    protected processGetExpensesForAMonth(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }

    /**
     * @return OK
     */
    getExpenseById(id: number): Promise<string> {
        let url_ = this.baseUrl + "/expenses/get/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetExpenseById(_response);
        });
    }

    protected processGetExpenseById(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }

    /**
     * @param currentYear (optional) 
     * @param previousYear (optional) 
     * @return OK
     */
    compareCategories(currentPeriodType: string, currentPeriodValue: number, previousPeriodType: string, previousPeriodValue: number, currentYear: number | undefined, previousYear: number | undefined): Promise<CategoryComparisonResponseDto> {
        let url_ = this.baseUrl + "/expenses/compare?";
        if (currentPeriodType === undefined || currentPeriodType === null)
            throw new Error("The parameter 'currentPeriodType' must be defined and cannot be null.");
        else
            url_ += "currentPeriodType=" + encodeURIComponent("" + currentPeriodType) + "&";
        if (currentPeriodValue === undefined || currentPeriodValue === null)
            throw new Error("The parameter 'currentPeriodValue' must be defined and cannot be null.");
        else
            url_ += "currentPeriodValue=" + encodeURIComponent("" + currentPeriodValue) + "&";
        if (previousPeriodType === undefined || previousPeriodType === null)
            throw new Error("The parameter 'previousPeriodType' must be defined and cannot be null.");
        else
            url_ += "previousPeriodType=" + encodeURIComponent("" + previousPeriodType) + "&";
        if (previousPeriodValue === undefined || previousPeriodValue === null)
            throw new Error("The parameter 'previousPeriodValue' must be defined and cannot be null.");
        else
            url_ += "previousPeriodValue=" + encodeURIComponent("" + previousPeriodValue) + "&";
        if (currentYear === null)
            throw new Error("The parameter 'currentYear' cannot be null.");
        else if (currentYear !== undefined)
            url_ += "currentYear=" + encodeURIComponent("" + currentYear) + "&";
        if (previousYear === null)
            throw new Error("The parameter 'previousYear' cannot be null.");
        else if (previousYear !== undefined)
            url_ += "previousYear=" + encodeURIComponent("" + previousYear) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCompareCategories(_response);
        });
    }

    protected processCompareCategories(response: Response): Promise<CategoryComparisonResponseDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CategoryComparisonResponseDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CategoryComparisonResponseDto>(null as any);
    }

    /**
     * @return OK
     */
    getCurrency(currencyId: number): Promise<GetCurrencyDto> {
        let url_ = this.baseUrl + "/currency/{currencyId}";
        if (currencyId === undefined || currencyId === null)
            throw new Error("The parameter 'currencyId' must be defined.");
        url_ = url_.replace("{currencyId}", encodeURIComponent("" + currencyId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCurrency(_response);
        });
    }

    protected processGetCurrency(response: Response): Promise<GetCurrencyDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetCurrencyDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetCurrencyDto>(null as any);
    }

    /**
     * @return OK
     */
    getAllCurrencies(): Promise<GetCurrencyDto[]> {
        let url_ = this.baseUrl + "/currency/all";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAllCurrencies(_response);
        });
    }

    protected processGetAllCurrencies(response: Response): Promise<GetCurrencyDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(GetCurrencyDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetCurrencyDto[]>(null as any);
    }

    /**
     * @return OK
     */
    getIncomeCategory(categoryId: number): Promise<GetIncomeCategoryDto> {
        let url_ = this.baseUrl + "/category/income/get/{categoryId}";
        if (categoryId === undefined || categoryId === null)
            throw new Error("The parameter 'categoryId' must be defined.");
        url_ = url_.replace("{categoryId}", encodeURIComponent("" + categoryId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetIncomeCategory(_response);
        });
    }

    protected processGetIncomeCategory(response: Response): Promise<GetIncomeCategoryDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetIncomeCategoryDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetIncomeCategoryDto>(null as any);
    }

    /**
     * @return OK
     */
    getAllIncomeCategories(): Promise<GetIncomeCategoryDto[]> {
        let url_ = this.baseUrl + "/category/income/all";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAllIncomeCategories(_response);
        });
    }

    protected processGetAllIncomeCategories(response: Response): Promise<GetIncomeCategoryDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(GetIncomeCategoryDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetIncomeCategoryDto[]>(null as any);
    }

    /**
     * @return OK
     */
    getExpenseCategory(categoryId: number): Promise<GetExpenseCategoryDto> {
        let url_ = this.baseUrl + "/category/expense/get/{categoryId}";
        if (categoryId === undefined || categoryId === null)
            throw new Error("The parameter 'categoryId' must be defined.");
        url_ = url_.replace("{categoryId}", encodeURIComponent("" + categoryId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetExpenseCategory(_response);
        });
    }

    protected processGetExpenseCategory(response: Response): Promise<GetExpenseCategoryDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetExpenseCategoryDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetExpenseCategoryDto>(null as any);
    }

    /**
     * @return OK
     */
    getAllExpenseCategories(): Promise<GetExpenseCategoryDto[]> {
        let url_ = this.baseUrl + "/category/expense/all";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAllExpenseCategories(_response);
        });
    }

    protected processGetAllExpenseCategories(response: Response): Promise<GetExpenseCategoryDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(GetExpenseCategoryDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetExpenseCategoryDto[]>(null as any);
    }

    /**
     * @return OK
     */
    getBudget(): Promise<string> {
        let url_ = this.baseUrl + "/budget";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetBudget(_response);
        });
    }

    protected processGetBudget(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }

    /**
     * @param month (optional) 
     * @param year (optional) 
     * @return OK
     */
    getBudgetBurndown(month: number | undefined, year: number | undefined): Promise<BudgetBurndownDto> {
        let url_ = this.baseUrl + "/budget/burndown?";
        if (month === null)
            throw new Error("The parameter 'month' cannot be null.");
        else if (month !== undefined)
            url_ += "month=" + encodeURIComponent("" + month) + "&";
        if (year === null)
            throw new Error("The parameter 'year' cannot be null.");
        else if (year !== undefined)
            url_ += "year=" + encodeURIComponent("" + year) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetBudgetBurndown(_response);
        });
    }

    protected processGetBudgetBurndown(response: Response): Promise<BudgetBurndownDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BudgetBurndownDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BudgetBurndownDto>(null as any);
    }

    /**
     * @return OK
     */
    loggedIn(): Promise<string> {
        let url_ = this.baseUrl + "/auth/loggedIn";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "*/*"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLoggedIn(_response);
        });
    }

    protected processLoggedIn(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }

    /**
     * @return OK
     */
    deleteUser(username: string): Promise<string> {
        let url_ = this.baseUrl + "/user/delete/{username}";
        if (username === undefined || username === null)
            throw new Error("The parameter 'username' must be defined.");
        url_ = url_.replace("{username}", encodeURIComponent("" + username));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "*/*"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteUser(_response);
        });
    }

    protected processDeleteUser(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }

    /**
     * @return OK
     */
    deleteTag(id: number): Promise<any> {
        let url_ = this.baseUrl + "/tags/delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteTag(_response);
        });
    }

    protected processDeleteTag(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(null as any);
    }

    /**
     * @return OK
     */
    deleteIncome(id: number): Promise<string> {
        let url_ = this.baseUrl + "/incomes/delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "*/*"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteIncome(_response);
        });
    }

    protected processDeleteIncome(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }

    /**
     * @return OK
     */
    deleteCurrency(currencyId: number): Promise<void> {
        let url_ = this.baseUrl + "/currency/delete/{currencyId}";
        if (currencyId === undefined || currencyId === null)
            throw new Error("The parameter 'currencyId' must be defined.");
        url_ = url_.replace("{currencyId}", encodeURIComponent("" + currencyId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteCurrency(_response);
        });
    }

    protected processDeleteCurrency(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class PingClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "http://localhost:8080/api";
    }

    /**
     * @return OK
     */
    1(): Promise<string> {
        let url_ = this.baseUrl + "/ping";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "*/*"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.process1(_response);
        });
    }

    protected process1(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }
}

export class PingNotClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "http://localhost:8080/api";
    }

    /**
     * @return OK
     */
    1(): Promise<string> {
        let url_ = this.baseUrl + "/ping/not";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "*/*"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.process1(_response);
        });
    }

    protected process1(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }
}

export class SaveIncomeCategoryClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "http://localhost:8080/api";
    }

    /**
     * @return OK
     */
    1(categoryId: number): Promise<string> {
        let url_ = this.baseUrl + "/category/income/delete/{categoryId}";
        if (categoryId === undefined || categoryId === null)
            throw new Error("The parameter 'categoryId' must be defined.");
        url_ = url_.replace("{categoryId}", encodeURIComponent("" + categoryId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.process1(_response);
        });
    }

    protected process1(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }
}

export class SaveExpenseCategoryClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "http://localhost:8080/api";
    }

    /**
     * @return OK
     */
    1(categoryId: number): Promise<string> {
        let url_ = this.baseUrl + "/category/expense/delete/{categoryId}";
        if (categoryId === undefined || categoryId === null)
            throw new Error("The parameter 'categoryId' must be defined.");
        url_ = url_.replace("{categoryId}", encodeURIComponent("" + categoryId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.process1(_response);
        });
    }

    protected process1(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }
}

export class UpdateTagDto implements IUpdateTagDto {
    name?: string;
    description?: string;

    [key: string]: any;

    constructor(data?: IUpdateTagDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.name = _data["name"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): UpdateTagDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateTagDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["name"] = this.name;
        data["description"] = this.description;
        return data;
    }
}

export interface IUpdateTagDto {
    name?: string;
    description?: string;

    [key: string]: any;
}

export class CreateIncomeCategoryDto implements ICreateIncomeCategoryDto {
    description?: string;
    name?: string;

    [key: string]: any;

    constructor(data?: ICreateIncomeCategoryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.description = _data["description"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): CreateIncomeCategoryDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateIncomeCategoryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["description"] = this.description;
        data["name"] = this.name;
        return data;
    }
}

export interface ICreateIncomeCategoryDto {
    description?: string;
    name?: string;

    [key: string]: any;
}

export class CreateExpenseCategoryDto implements ICreateExpenseCategoryDto {
    description?: string;
    name?: string;
    budget?: number;

    [key: string]: any;

    constructor(data?: ICreateExpenseCategoryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.description = _data["description"];
            this.name = _data["name"];
            this.budget = _data["budget"];
        }
    }

    static fromJS(data: any): CreateExpenseCategoryDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateExpenseCategoryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["description"] = this.description;
        data["name"] = this.name;
        data["budget"] = this.budget;
        return data;
    }
}

export interface ICreateExpenseCategoryDto {
    description?: string;
    name?: string;
    budget?: number;

    [key: string]: any;
}

export class UpdateUserDto implements IUpdateUserDto {
    firstName?: string;
    lastName?: string;
    currencyId?: number;

    [key: string]: any;

    constructor(data?: IUpdateUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.currencyId = _data["currencyId"];
        }
    }

    static fromJS(data: any): UpdateUserDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["currencyId"] = this.currencyId;
        return data;
    }
}

export interface IUpdateUserDto {
    firstName?: string;
    lastName?: string;
    currencyId?: number;

    [key: string]: any;
}

export class CreateTagDto implements ICreateTagDto {
    name?: string;
    description?: string;

    [key: string]: any;

    constructor(data?: ICreateTagDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.name = _data["name"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): CreateTagDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateTagDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["name"] = this.name;
        data["description"] = this.description;
        return data;
    }
}

export interface ICreateTagDto {
    name?: string;
    description?: string;

    [key: string]: any;
}

export class GetTagDto implements IGetTagDto {
    id?: number;
    name?: string;
    description?: string;
    userId?: string;

    [key: string]: any;

    constructor(data?: IGetTagDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.userId = _data["userId"];
        }
    }

    static fromJS(data: any): GetTagDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetTagDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["userId"] = this.userId;
        return data;
    }
}

export interface IGetTagDto {
    id?: number;
    name?: string;
    description?: string;
    userId?: string;

    [key: string]: any;
}

export class CreateIncomeDto implements ICreateIncomeDto {
    categoryId?: number;
    amount?: number;
    date?: Date;
    currencyId?: number;
    description?: string;
    tagId?: number;

    [key: string]: any;

    constructor(data?: ICreateIncomeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.categoryId = _data["categoryId"];
            this.amount = _data["amount"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.currencyId = _data["currencyId"];
            this.description = _data["description"];
            this.tagId = _data["tagId"];
        }
    }

    static fromJS(data: any): CreateIncomeDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateIncomeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["categoryId"] = this.categoryId;
        data["amount"] = this.amount;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["currencyId"] = this.currencyId;
        data["description"] = this.description;
        data["tagId"] = this.tagId;
        return data;
    }
}

export interface ICreateIncomeDto {
    categoryId?: number;
    amount?: number;
    date?: Date;
    currencyId?: number;
    description?: string;
    tagId?: number;

    [key: string]: any;
}

export class Expense implements IExpense {
    id?: number;
    userId?: string;
    amount?: number;
    currencyId?: number;
    tagId?: number;
    date?: Date;
    description?: string;
    month?: number;
    year?: number;
    week?: number;
    lastUpdate?: Date;
    categoryId?: number;

    [key: string]: any;

    constructor(data?: IExpense) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.userId = _data["userId"];
            this.amount = _data["amount"];
            this.currencyId = _data["currencyId"];
            this.tagId = _data["tagId"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.description = _data["description"];
            this.month = _data["month"];
            this.year = _data["year"];
            this.week = _data["week"];
            this.lastUpdate = _data["lastUpdate"] ? new Date(_data["lastUpdate"].toString()) : <any>undefined;
            this.categoryId = _data["categoryId"];
        }
    }

    static fromJS(data: any): Expense {
        data = typeof data === 'object' ? data : {};
        let result = new Expense();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["userId"] = this.userId;
        data["amount"] = this.amount;
        data["currencyId"] = this.currencyId;
        data["tagId"] = this.tagId;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["description"] = this.description;
        data["month"] = this.month;
        data["year"] = this.year;
        data["week"] = this.week;
        data["lastUpdate"] = this.lastUpdate ? this.lastUpdate.toISOString() : <any>undefined;
        data["categoryId"] = this.categoryId;
        return data;
    }
}

export interface IExpense {
    id?: number;
    userId?: string;
    amount?: number;
    currencyId?: number;
    tagId?: number;
    date?: Date;
    description?: string;
    month?: number;
    year?: number;
    week?: number;
    lastUpdate?: Date;
    categoryId?: number;

    [key: string]: any;
}

export class CreateExpenseDto implements ICreateExpenseDto {
    categoryId?: number;
    amount?: number;
    currencyId?: number;
    date?: Date;
    description?: string;
    tagId?: number;

    [key: string]: any;

    constructor(data?: ICreateExpenseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.categoryId = _data["categoryId"];
            this.amount = _data["amount"];
            this.currencyId = _data["currencyId"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.description = _data["description"];
            this.tagId = _data["tagId"];
        }
    }

    static fromJS(data: any): CreateExpenseDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateExpenseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["categoryId"] = this.categoryId;
        data["amount"] = this.amount;
        data["currencyId"] = this.currencyId;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["description"] = this.description;
        data["tagId"] = this.tagId;
        return data;
    }
}

export interface ICreateExpenseDto {
    categoryId?: number;
    amount?: number;
    currencyId?: number;
    date?: Date;
    description?: string;
    tagId?: number;

    [key: string]: any;
}

export class CreateCurrencyDto implements ICreateCurrencyDto {
    name?: string;
    symbol?: string;
    description?: string;

    [key: string]: any;

    constructor(data?: ICreateCurrencyDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.name = _data["name"];
            this.symbol = _data["symbol"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): CreateCurrencyDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCurrencyDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["name"] = this.name;
        data["symbol"] = this.symbol;
        data["description"] = this.description;
        return data;
    }
}

export interface ICreateCurrencyDto {
    name?: string;
    symbol?: string;
    description?: string;

    [key: string]: any;
}

export class GetCurrencyDto implements IGetCurrencyDto {
    id?: number;
    name?: string;
    symbol?: string;
    description?: string;

    [key: string]: any;

    constructor(data?: IGetCurrencyDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.name = _data["name"];
            this.symbol = _data["symbol"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): GetCurrencyDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetCurrencyDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["name"] = this.name;
        data["symbol"] = this.symbol;
        data["description"] = this.description;
        return data;
    }
}

export interface IGetCurrencyDto {
    id?: number;
    name?: string;
    symbol?: string;
    description?: string;

    [key: string]: any;
}

export class UpdateBudgetDto implements IUpdateBudgetDto {
    categoryId?: number;
    newBudget?: number;

    [key: string]: any;

    constructor(data?: IUpdateBudgetDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.categoryId = _data["categoryId"];
            this.newBudget = _data["newBudget"];
        }
    }

    static fromJS(data: any): UpdateBudgetDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateBudgetDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["categoryId"] = this.categoryId;
        data["newBudget"] = this.newBudget;
        return data;
    }
}

export interface IUpdateBudgetDto {
    categoryId?: number;
    newBudget?: number;

    [key: string]: any;
}

export class CreateUserDto implements ICreateUserDto {
    username?: string;
    password?: string;
    confirmPassword?: string;
    email?: string;

    [key: string]: any;

    constructor(data?: ICreateUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.username = _data["username"];
            this.password = _data["password"];
            this.confirmPassword = _data["confirmPassword"];
            this.email = _data["email"];
        }
    }

    static fromJS(data: any): CreateUserDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["username"] = this.username;
        data["password"] = this.password;
        data["confirmPassword"] = this.confirmPassword;
        data["email"] = this.email;
        return data;
    }
}

export interface ICreateUserDto {
    username?: string;
    password?: string;
    confirmPassword?: string;
    email?: string;

    [key: string]: any;
}

export class UserLoginRequest implements IUserLoginRequest {
    username?: string;
    email?: string;
    password?: string;

    [key: string]: any;

    constructor(data?: IUserLoginRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.username = _data["username"];
            this.email = _data["email"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): UserLoginRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UserLoginRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["username"] = this.username;
        data["email"] = this.email;
        data["password"] = this.password;
        return data;
    }
}

export interface IUserLoginRequest {
    username?: string;
    email?: string;
    password?: string;

    [key: string]: any;
}

export class GetUserDto implements IGetUserDto {
    id?: string;
    username?: string;
    email?: string;
    profilePicture?: string;
    creationDate?: Date;
    firstName?: string;
    lastName?: string;
    role?: GetUserDtoRole;
    currencyId?: number;

    [key: string]: any;

    constructor(data?: IGetUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.username = _data["username"];
            this.email = _data["email"];
            this.profilePicture = _data["profilePicture"];
            this.creationDate = _data["creationDate"] ? new Date(_data["creationDate"].toString()) : <any>undefined;
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.role = _data["role"];
            this.currencyId = _data["currencyId"];
        }
    }

    static fromJS(data: any): GetUserDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["username"] = this.username;
        data["email"] = this.email;
        data["profilePicture"] = this.profilePicture;
        data["creationDate"] = this.creationDate ? this.creationDate.toISOString() : <any>undefined;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["role"] = this.role;
        data["currencyId"] = this.currencyId;
        return data;
    }
}

export interface IGetUserDto {
    id?: string;
    username?: string;
    email?: string;
    profilePicture?: string;
    creationDate?: Date;
    firstName?: string;
    lastName?: string;
    role?: GetUserDtoRole;
    currencyId?: number;

    [key: string]: any;
}

export class AverageSpendingDto implements IAverageSpendingDto {
    averageDailySpend?: number;
    averageWeeklySpend?: number;

    [key: string]: any;

    constructor(data?: IAverageSpendingDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.averageDailySpend = _data["averageDailySpend"];
            this.averageWeeklySpend = _data["averageWeeklySpend"];
        }
    }

    static fromJS(data: any): AverageSpendingDto {
        data = typeof data === 'object' ? data : {};
        let result = new AverageSpendingDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["averageDailySpend"] = this.averageDailySpend;
        data["averageWeeklySpend"] = this.averageWeeklySpend;
        return data;
    }
}

export interface IAverageSpendingDto {
    averageDailySpend?: number;
    averageWeeklySpend?: number;

    [key: string]: any;
}

export class BudgetStreakDto implements IBudgetStreakDto {
    longestStreakDays?: number;
    streakStartDate?: string;
    streakEndDate?: string;

    [key: string]: any;

    constructor(data?: IBudgetStreakDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.longestStreakDays = _data["longestStreakDays"];
            this.streakStartDate = _data["streakStartDate"];
            this.streakEndDate = _data["streakEndDate"];
        }
    }

    static fromJS(data: any): BudgetStreakDto {
        data = typeof data === 'object' ? data : {};
        let result = new BudgetStreakDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["longestStreakDays"] = this.longestStreakDays;
        data["streakStartDate"] = this.streakStartDate;
        data["streakEndDate"] = this.streakEndDate;
        return data;
    }
}

export interface IBudgetStreakDto {
    longestStreakDays?: number;
    streakStartDate?: string;
    streakEndDate?: string;

    [key: string]: any;
}

export class CategorySpendingDto implements ICategorySpendingDto {
    categoryId?: number;
    categoryName?: string;
    amount?: number;

    [key: string]: any;

    constructor(data?: ICategorySpendingDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.categoryId = _data["categoryId"];
            this.categoryName = _data["categoryName"];
            this.amount = _data["amount"];
        }
    }

    static fromJS(data: any): CategorySpendingDto {
        data = typeof data === 'object' ? data : {};
        let result = new CategorySpendingDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["categoryId"] = this.categoryId;
        data["categoryName"] = this.categoryName;
        data["amount"] = this.amount;
        return data;
    }
}

export interface ICategorySpendingDto {
    categoryId?: number;
    categoryName?: string;
    amount?: number;

    [key: string]: any;
}

export class DaySpendingDto implements IDaySpendingDto {
    date?: string;
    amount?: number;

    [key: string]: any;

    constructor(data?: IDaySpendingDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.date = _data["date"];
            this.amount = _data["amount"];
        }
    }

    static fromJS(data: any): DaySpendingDto {
        data = typeof data === 'object' ? data : {};
        let result = new DaySpendingDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["date"] = this.date;
        data["amount"] = this.amount;
        return data;
    }
}

export interface IDaySpendingDto {
    date?: string;
    amount?: number;

    [key: string]: any;
}

export class HighestSpendingDto implements IHighestSpendingDto {
    highestSpendingDay?: DaySpendingDto;
    highestSpendingMonth?: MonthSpendingDto;
    highestSpendingCategory?: CategorySpendingDto;

    [key: string]: any;

    constructor(data?: IHighestSpendingDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.highestSpendingDay = _data["highestSpendingDay"] ? DaySpendingDto.fromJS(_data["highestSpendingDay"]) : <any>undefined;
            this.highestSpendingMonth = _data["highestSpendingMonth"] ? MonthSpendingDto.fromJS(_data["highestSpendingMonth"]) : <any>undefined;
            this.highestSpendingCategory = _data["highestSpendingCategory"] ? CategorySpendingDto.fromJS(_data["highestSpendingCategory"]) : <any>undefined;
        }
    }

    static fromJS(data: any): HighestSpendingDto {
        data = typeof data === 'object' ? data : {};
        let result = new HighestSpendingDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["highestSpendingDay"] = this.highestSpendingDay ? this.highestSpendingDay.toJSON() : <any>undefined;
        data["highestSpendingMonth"] = this.highestSpendingMonth ? this.highestSpendingMonth.toJSON() : <any>undefined;
        data["highestSpendingCategory"] = this.highestSpendingCategory ? this.highestSpendingCategory.toJSON() : <any>undefined;
        return data;
    }
}

export interface IHighestSpendingDto {
    highestSpendingDay?: DaySpendingDto;
    highestSpendingMonth?: MonthSpendingDto;
    highestSpendingCategory?: CategorySpendingDto;

    [key: string]: any;
}

export class MonthSpendingDto implements IMonthSpendingDto {
    month?: number;
    year?: number;
    amount?: number;

    [key: string]: any;

    constructor(data?: IMonthSpendingDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.month = _data["month"];
            this.year = _data["year"];
            this.amount = _data["amount"];
        }
    }

    static fromJS(data: any): MonthSpendingDto {
        data = typeof data === 'object' ? data : {};
        let result = new MonthSpendingDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["month"] = this.month;
        data["year"] = this.year;
        data["amount"] = this.amount;
        return data;
    }
}

export interface IMonthSpendingDto {
    month?: number;
    year?: number;
    amount?: number;

    [key: string]: any;
}

export class SavingsDto implements ISavingsDto {
    averageMonthlySavingsRate?: number;
    monthlySavingsPercentage?: { [key: string]: number; };

    [key: string]: any;

    constructor(data?: ISavingsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.averageMonthlySavingsRate = _data["averageMonthlySavingsRate"];
            if (_data["monthlySavingsPercentage"]) {
                this.monthlySavingsPercentage = {} as any;
                for (let key in _data["monthlySavingsPercentage"]) {
                    if (_data["monthlySavingsPercentage"].hasOwnProperty(key))
                        (<any>this.monthlySavingsPercentage)![key] = _data["monthlySavingsPercentage"][key];
                }
            }
        }
    }

    static fromJS(data: any): SavingsDto {
        data = typeof data === 'object' ? data : {};
        let result = new SavingsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["averageMonthlySavingsRate"] = this.averageMonthlySavingsRate;
        if (this.monthlySavingsPercentage) {
            data["monthlySavingsPercentage"] = {};
            for (let key in this.monthlySavingsPercentage) {
                if (this.monthlySavingsPercentage.hasOwnProperty(key))
                    (<any>data["monthlySavingsPercentage"])[key] = (<any>this.monthlySavingsPercentage)[key];
            }
        }
        return data;
    }
}

export interface ISavingsDto {
    averageMonthlySavingsRate?: number;
    monthlySavingsPercentage?: { [key: string]: number; };

    [key: string]: any;
}

export class StatisticalSummaryDto implements IStatisticalSummaryDto {
    highestSpending?: HighestSpendingDto;
    savings?: SavingsDto;
    averageSpending?: AverageSpendingDto;
    budgetStreak?: BudgetStreakDto;

    [key: string]: any;

    constructor(data?: IStatisticalSummaryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.highestSpending = _data["highestSpending"] ? HighestSpendingDto.fromJS(_data["highestSpending"]) : <any>undefined;
            this.savings = _data["savings"] ? SavingsDto.fromJS(_data["savings"]) : <any>undefined;
            this.averageSpending = _data["averageSpending"] ? AverageSpendingDto.fromJS(_data["averageSpending"]) : <any>undefined;
            this.budgetStreak = _data["budgetStreak"] ? BudgetStreakDto.fromJS(_data["budgetStreak"]) : <any>undefined;
        }
    }

    static fromJS(data: any): StatisticalSummaryDto {
        data = typeof data === 'object' ? data : {};
        let result = new StatisticalSummaryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["highestSpending"] = this.highestSpending ? this.highestSpending.toJSON() : <any>undefined;
        data["savings"] = this.savings ? this.savings.toJSON() : <any>undefined;
        data["averageSpending"] = this.averageSpending ? this.averageSpending.toJSON() : <any>undefined;
        data["budgetStreak"] = this.budgetStreak ? this.budgetStreak.toJSON() : <any>undefined;
        return data;
    }
}

export interface IStatisticalSummaryDto {
    highestSpending?: HighestSpendingDto;
    savings?: SavingsDto;
    averageSpending?: AverageSpendingDto;
    budgetStreak?: BudgetStreakDto;

    [key: string]: any;
}

export class GetIncomeDto implements IGetIncomeDto {
    id?: number;
    userId?: string;
    amount?: number;
    currencyId?: number;
    date?: Date;
    description?: string;
    month?: number;
    year?: number;
    week?: number;
    lastUpdate?: Date;
    categoryId?: number;
    tagId?: number;

    [key: string]: any;

    constructor(data?: IGetIncomeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.userId = _data["userId"];
            this.amount = _data["amount"];
            this.currencyId = _data["currencyId"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.description = _data["description"];
            this.month = _data["month"];
            this.year = _data["year"];
            this.week = _data["week"];
            this.lastUpdate = _data["lastUpdate"] ? new Date(_data["lastUpdate"].toString()) : <any>undefined;
            this.categoryId = _data["categoryId"];
            this.tagId = _data["tagId"];
        }
    }

    static fromJS(data: any): GetIncomeDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetIncomeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["userId"] = this.userId;
        data["amount"] = this.amount;
        data["currencyId"] = this.currencyId;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["description"] = this.description;
        data["month"] = this.month;
        data["year"] = this.year;
        data["week"] = this.week;
        data["lastUpdate"] = this.lastUpdate ? this.lastUpdate.toISOString() : <any>undefined;
        data["categoryId"] = this.categoryId;
        data["tagId"] = this.tagId;
        return data;
    }
}

export interface IGetIncomeDto {
    id?: number;
    userId?: string;
    amount?: number;
    currencyId?: number;
    date?: Date;
    description?: string;
    month?: number;
    year?: number;
    week?: number;
    lastUpdate?: Date;
    categoryId?: number;
    tagId?: number;

    [key: string]: any;
}

export class CategoryComparisonDto implements ICategoryComparisonDto {
    categoryId?: number;
    categoryName?: string;
    currentPeriodAmount?: number;
    previousPeriodAmount?: number;
    difference?: number;
    percentageChange?: number;

    [key: string]: any;

    constructor(data?: ICategoryComparisonDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.categoryId = _data["categoryId"];
            this.categoryName = _data["categoryName"];
            this.currentPeriodAmount = _data["currentPeriodAmount"];
            this.previousPeriodAmount = _data["previousPeriodAmount"];
            this.difference = _data["difference"];
            this.percentageChange = _data["percentageChange"];
        }
    }

    static fromJS(data: any): CategoryComparisonDto {
        data = typeof data === 'object' ? data : {};
        let result = new CategoryComparisonDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["categoryId"] = this.categoryId;
        data["categoryName"] = this.categoryName;
        data["currentPeriodAmount"] = this.currentPeriodAmount;
        data["previousPeriodAmount"] = this.previousPeriodAmount;
        data["difference"] = this.difference;
        data["percentageChange"] = this.percentageChange;
        return data;
    }
}

export interface ICategoryComparisonDto {
    categoryId?: number;
    categoryName?: string;
    currentPeriodAmount?: number;
    previousPeriodAmount?: number;
    difference?: number;
    percentageChange?: number;

    [key: string]: any;
}

export class CategoryComparisonResponseDto implements ICategoryComparisonResponseDto {
    currentPeriodLabel?: string;
    previousPeriodLabel?: string;
    categories?: CategoryComparisonDto[];
    totalCurrentPeriod?: number;
    totalPreviousPeriod?: number;
    totalDifference?: number;
    totalPercentageChange?: number;

    [key: string]: any;

    constructor(data?: ICategoryComparisonResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.currentPeriodLabel = _data["currentPeriodLabel"];
            this.previousPeriodLabel = _data["previousPeriodLabel"];
            if (Array.isArray(_data["categories"])) {
                this.categories = [] as any;
                for (let item of _data["categories"])
                    this.categories!.push(CategoryComparisonDto.fromJS(item));
            }
            this.totalCurrentPeriod = _data["totalCurrentPeriod"];
            this.totalPreviousPeriod = _data["totalPreviousPeriod"];
            this.totalDifference = _data["totalDifference"];
            this.totalPercentageChange = _data["totalPercentageChange"];
        }
    }

    static fromJS(data: any): CategoryComparisonResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new CategoryComparisonResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["currentPeriodLabel"] = this.currentPeriodLabel;
        data["previousPeriodLabel"] = this.previousPeriodLabel;
        if (Array.isArray(this.categories)) {
            data["categories"] = [];
            for (let item of this.categories)
                data["categories"].push(item.toJSON());
        }
        data["totalCurrentPeriod"] = this.totalCurrentPeriod;
        data["totalPreviousPeriod"] = this.totalPreviousPeriod;
        data["totalDifference"] = this.totalDifference;
        data["totalPercentageChange"] = this.totalPercentageChange;
        return data;
    }
}

export interface ICategoryComparisonResponseDto {
    currentPeriodLabel?: string;
    previousPeriodLabel?: string;
    categories?: CategoryComparisonDto[];
    totalCurrentPeriod?: number;
    totalPreviousPeriod?: number;
    totalDifference?: number;
    totalPercentageChange?: number;

    [key: string]: any;
}

export class GetIncomeCategoryDto implements IGetIncomeCategoryDto {
    id?: number;
    userId?: string;
    name?: string;
    description?: string;

    [key: string]: any;

    constructor(data?: IGetIncomeCategoryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.userId = _data["userId"];
            this.name = _data["name"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): GetIncomeCategoryDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetIncomeCategoryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["userId"] = this.userId;
        data["name"] = this.name;
        data["description"] = this.description;
        return data;
    }
}

export interface IGetIncomeCategoryDto {
    id?: number;
    userId?: string;
    name?: string;
    description?: string;

    [key: string]: any;
}

export class GetExpenseCategoryDto implements IGetExpenseCategoryDto {
    id?: number;
    userId?: string;
    name?: string;
    description?: string;
    budget?: number;

    [key: string]: any;

    constructor(data?: IGetExpenseCategoryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.userId = _data["userId"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.budget = _data["budget"];
        }
    }

    static fromJS(data: any): GetExpenseCategoryDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetExpenseCategoryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["userId"] = this.userId;
        data["name"] = this.name;
        data["description"] = this.description;
        data["budget"] = this.budget;
        return data;
    }
}

export interface IGetExpenseCategoryDto {
    id?: number;
    userId?: string;
    name?: string;
    description?: string;
    budget?: number;

    [key: string]: any;
}

export class BudgetBurndownDto implements IBudgetBurndownDto {
    month?: number;
    year?: number;
    categories?: CategoryBurndownDto[];

    [key: string]: any;

    constructor(data?: IBudgetBurndownDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.month = _data["month"];
            this.year = _data["year"];
            if (Array.isArray(_data["categories"])) {
                this.categories = [] as any;
                for (let item of _data["categories"])
                    this.categories!.push(CategoryBurndownDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BudgetBurndownDto {
        data = typeof data === 'object' ? data : {};
        let result = new BudgetBurndownDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["month"] = this.month;
        data["year"] = this.year;
        if (Array.isArray(this.categories)) {
            data["categories"] = [];
            for (let item of this.categories)
                data["categories"].push(item.toJSON());
        }
        return data;
    }
}

export interface IBudgetBurndownDto {
    month?: number;
    year?: number;
    categories?: CategoryBurndownDto[];

    [key: string]: any;
}

export class CategoryBurndownDto implements ICategoryBurndownDto {
    categoryId?: number;
    categoryName?: string;
    budget?: number;
    totalSpent?: number;
    dailySpending?: { [key: string]: number; };
    remainingBudget?: { [key: string]: number; };

    [key: string]: any;

    constructor(data?: ICategoryBurndownDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.categoryId = _data["categoryId"];
            this.categoryName = _data["categoryName"];
            this.budget = _data["budget"];
            this.totalSpent = _data["totalSpent"];
            if (_data["dailySpending"]) {
                this.dailySpending = {} as any;
                for (let key in _data["dailySpending"]) {
                    if (_data["dailySpending"].hasOwnProperty(key))
                        (<any>this.dailySpending)![key] = _data["dailySpending"][key];
                }
            }
            if (_data["remainingBudget"]) {
                this.remainingBudget = {} as any;
                for (let key in _data["remainingBudget"]) {
                    if (_data["remainingBudget"].hasOwnProperty(key))
                        (<any>this.remainingBudget)![key] = _data["remainingBudget"][key];
                }
            }
        }
    }

    static fromJS(data: any): CategoryBurndownDto {
        data = typeof data === 'object' ? data : {};
        let result = new CategoryBurndownDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["categoryId"] = this.categoryId;
        data["categoryName"] = this.categoryName;
        data["budget"] = this.budget;
        data["totalSpent"] = this.totalSpent;
        if (this.dailySpending) {
            data["dailySpending"] = {};
            for (let key in this.dailySpending) {
                if (this.dailySpending.hasOwnProperty(key))
                    (<any>data["dailySpending"])[key] = (<any>this.dailySpending)[key];
            }
        }
        if (this.remainingBudget) {
            data["remainingBudget"] = {};
            for (let key in this.remainingBudget) {
                if (this.remainingBudget.hasOwnProperty(key))
                    (<any>data["remainingBudget"])[key] = (<any>this.remainingBudget)[key];
            }
        }
        return data;
    }
}

export interface ICategoryBurndownDto {
    categoryId?: number;
    categoryName?: string;
    budget?: number;
    totalSpent?: number;
    dailySpending?: { [key: string]: number; };
    remainingBudget?: { [key: string]: number; };

    [key: string]: any;
}

export enum GetUserDtoRole {
    USER = "USER",
    ADMIN = "ADMIN",
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}
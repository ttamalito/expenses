//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class CreateExpenseCategoryDto implements ICreateExpenseCategoryDto {
    description?: string;
    name?: string;
    budget?: number;

    [key: string]: any;

    constructor(data?: ICreateExpenseCategoryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.description = _data["description"];
            this.name = _data["name"];
            this.budget = _data["budget"];
        }
    }

    static fromJS(data: any): CreateExpenseCategoryDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateExpenseCategoryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["description"] = this.description;
        data["name"] = this.name;
        data["budget"] = this.budget;
        return data;
    }
}

export interface ICreateExpenseCategoryDto {
    description?: string;
    name?: string;
    budget?: number;

    [key: string]: any;
}

export class UserSignupRequest implements IUserSignupRequest {
    username?: string;
    password?: string;
    confirmPassword?: string;
    email?: string;

    [key: string]: any;

    constructor(data?: IUserSignupRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.username = _data["username"];
            this.password = _data["password"];
            this.confirmPassword = _data["confirmPassword"];
            this.email = _data["email"];
        }
    }

    static fromJS(data: any): UserSignupRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UserSignupRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["username"] = this.username;
        data["password"] = this.password;
        data["confirmPassword"] = this.confirmPassword;
        data["email"] = this.email;
        return data;
    }
}

export interface IUserSignupRequest {
    username?: string;
    password?: string;
    confirmPassword?: string;
    email?: string;

    [key: string]: any;
}

export class EntityResponseVoid implements IEntityResponseVoid {

    [key: string]: any;

    constructor(data?: IEntityResponseVoid) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): EntityResponseVoid {
        data = typeof data === 'object' ? data : {};
        let result = new EntityResponseVoid();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface IEntityResponseVoid {

    [key: string]: any;
}

export class AddIncomeRequest implements IAddIncomeRequest {
    categoryId?: number;
    amount?: number;
    currencyId?: number;
    date?: Date;
    description?: string;

    [key: string]: any;

    constructor(data?: IAddIncomeRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.categoryId = _data["categoryId"];
            this.amount = _data["amount"];
            this.currencyId = _data["currencyId"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): AddIncomeRequest {
        data = typeof data === 'object' ? data : {};
        let result = new AddIncomeRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["categoryId"] = this.categoryId;
        data["amount"] = this.amount;
        data["currencyId"] = this.currencyId;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["description"] = this.description;
        return data;
    }
}

export interface IAddIncomeRequest {
    categoryId?: number;
    amount?: number;
    currencyId?: number;
    date?: Date;
    description?: string;

    [key: string]: any;
}

export class Expense implements IExpense {
    id?: number;
    userId?: string;
    amount?: number;
    currencyId?: number;
    date?: Date;
    description?: string;
    month?: number;
    year?: number;
    week?: number;
    lastUpdate?: Date;
    categoryId?: number;

    [key: string]: any;

    constructor(data?: IExpense) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.userId = _data["userId"];
            this.amount = _data["amount"];
            this.currencyId = _data["currencyId"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.description = _data["description"];
            this.month = _data["month"];
            this.year = _data["year"];
            this.week = _data["week"];
            this.lastUpdate = _data["lastUpdate"] ? new Date(_data["lastUpdate"].toString()) : <any>undefined;
            this.categoryId = _data["categoryId"];
        }
    }

    static fromJS(data: any): Expense {
        data = typeof data === 'object' ? data : {};
        let result = new Expense();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["userId"] = this.userId;
        data["amount"] = this.amount;
        data["currencyId"] = this.currencyId;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["description"] = this.description;
        data["month"] = this.month;
        data["year"] = this.year;
        data["week"] = this.week;
        data["lastUpdate"] = this.lastUpdate ? this.lastUpdate.toISOString() : <any>undefined;
        data["categoryId"] = this.categoryId;
        return data;
    }
}

export interface IExpense {
    id?: number;
    userId?: string;
    amount?: number;
    currencyId?: number;
    date?: Date;
    description?: string;
    month?: number;
    year?: number;
    week?: number;
    lastUpdate?: Date;
    categoryId?: number;

    [key: string]: any;
}

export class AddExpenseRequest implements IAddExpenseRequest {
    categoryId?: number;
    amount?: number;
    currencyId?: number;
    date?: Date;
    description?: string;

    [key: string]: any;

    constructor(data?: IAddExpenseRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.categoryId = _data["categoryId"];
            this.amount = _data["amount"];
            this.currencyId = _data["currencyId"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): AddExpenseRequest {
        data = typeof data === 'object' ? data : {};
        let result = new AddExpenseRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["categoryId"] = this.categoryId;
        data["amount"] = this.amount;
        data["currencyId"] = this.currencyId;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["description"] = this.description;
        return data;
    }
}

export interface IAddExpenseRequest {
    categoryId?: number;
    amount?: number;
    currencyId?: number;
    date?: Date;
    description?: string;

    [key: string]: any;
}

export class UpdateBudgetDto implements IUpdateBudgetDto {
    categoryId?: number;
    newBudget?: number;

    [key: string]: any;

    constructor(data?: IUpdateBudgetDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.categoryId = _data["categoryId"];
            this.newBudget = _data["newBudget"];
        }
    }

    static fromJS(data: any): UpdateBudgetDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateBudgetDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["categoryId"] = this.categoryId;
        data["newBudget"] = this.newBudget;
        return data;
    }
}

export interface IUpdateBudgetDto {
    categoryId?: number;
    newBudget?: number;

    [key: string]: any;
}

export class UserLoginRequest implements IUserLoginRequest {
    username?: string;
    email?: string;
    password?: string;

    [key: string]: any;

    constructor(data?: IUserLoginRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.username = _data["username"];
            this.email = _data["email"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): UserLoginRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UserLoginRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["username"] = this.username;
        data["email"] = this.email;
        data["password"] = this.password;
        return data;
    }
}

export interface IUserLoginRequest {
    username?: string;
    email?: string;
    password?: string;

    [key: string]: any;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}